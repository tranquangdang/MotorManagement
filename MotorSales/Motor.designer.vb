'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Motor")>  _
Partial Public Class MotorDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InserttblMotor(instance As tblMotor)
    End Sub
  Partial Private Sub UpdatetblMotor(instance As tblMotor)
    End Sub
  Partial Private Sub DeletetblMotor(instance As tblMotor)
    End Sub
  Partial Private Sub InserttblOrderInvoice(instance As tblOrderInvoice)
    End Sub
  Partial Private Sub UpdatetblOrderInvoice(instance As tblOrderInvoice)
    End Sub
  Partial Private Sub DeletetblOrderInvoice(instance As tblOrderInvoice)
    End Sub
  Partial Private Sub InserttblOrderInvoiceDetail(instance As tblOrderInvoiceDetail)
    End Sub
  Partial Private Sub UpdatetblOrderInvoiceDetail(instance As tblOrderInvoiceDetail)
    End Sub
  Partial Private Sub DeletetblOrderInvoiceDetail(instance As tblOrderInvoiceDetail)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.MotorSales.My.MySettings.Default.MotorConnectionString1, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property tblMotors() As System.Data.Linq.Table(Of tblMotor)
		Get
			Return Me.GetTable(Of tblMotor)
		End Get
	End Property
	
	Public ReadOnly Property tblOrderInvoices() As System.Data.Linq.Table(Of tblOrderInvoice)
		Get
			Return Me.GetTable(Of tblOrderInvoice)
		End Get
	End Property
	
	Public ReadOnly Property tblOrderInvoiceDetails() As System.Data.Linq.Table(Of tblOrderInvoiceDetail)
		Get
			Return Me.GetTable(Of tblOrderInvoiceDetail)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblMotor")>  _
Partial Public Class tblMotor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ProductID As String
	
	Private _Model As String
	
	Private _Brand As String
	
	Private _Category As String
	
	Private _CylinderCapacity As System.Nullable(Of Double)
	
	Private _Price As System.Nullable(Of Decimal)
	
	Private _Quantity As System.Nullable(Of Integer)
	
	Private _tblOrderInvoiceDetails As EntitySet(Of tblOrderInvoiceDetail)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnProductIDChanging(value As String)
    End Sub
    Partial Private Sub OnProductIDChanged()
    End Sub
    Partial Private Sub OnModelChanging(value As String)
    End Sub
    Partial Private Sub OnModelChanged()
    End Sub
    Partial Private Sub OnBrandChanging(value As String)
    End Sub
    Partial Private Sub OnBrandChanged()
    End Sub
    Partial Private Sub OnCategoryChanging(value As String)
    End Sub
    Partial Private Sub OnCategoryChanged()
    End Sub
    Partial Private Sub OnCylinderCapacityChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnCylinderCapacityChanged()
    End Sub
    Partial Private Sub OnPriceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPriceChanged()
    End Sub
    Partial Private Sub OnQuantityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnQuantityChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblOrderInvoiceDetails = New EntitySet(Of tblOrderInvoiceDetail)(AddressOf Me.attach_tblOrderInvoiceDetails, AddressOf Me.detach_tblOrderInvoiceDetails)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", DbType:="Char(5) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ProductID() As String
		Get
			Return Me._ProductID
		End Get
		Set
			If (String.Equals(Me._ProductID, value) = false) Then
				Me.OnProductIDChanging(value)
				Me.SendPropertyChanging
				Me._ProductID = value
				Me.SendPropertyChanged("ProductID")
				Me.OnProductIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Model", DbType:="NVarChar(100)")>  _
	Public Property Model() As String
		Get
			Return Me._Model
		End Get
		Set
			If (String.Equals(Me._Model, value) = false) Then
				Me.OnModelChanging(value)
				Me.SendPropertyChanging
				Me._Model = value
				Me.SendPropertyChanged("Model")
				Me.OnModelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Brand", DbType:="NVarChar(50)")>  _
	Public Property Brand() As String
		Get
			Return Me._Brand
		End Get
		Set
			If (String.Equals(Me._Brand, value) = false) Then
				Me.OnBrandChanging(value)
				Me.SendPropertyChanging
				Me._Brand = value
				Me.SendPropertyChanged("Brand")
				Me.OnBrandChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Category", DbType:="NVarChar(50)")>  _
	Public Property Category() As String
		Get
			Return Me._Category
		End Get
		Set
			If (String.Equals(Me._Category, value) = false) Then
				Me.OnCategoryChanging(value)
				Me.SendPropertyChanging
				Me._Category = value
				Me.SendPropertyChanged("Category")
				Me.OnCategoryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CylinderCapacity", DbType:="Float")>  _
	Public Property CylinderCapacity() As System.Nullable(Of Double)
		Get
			Return Me._CylinderCapacity
		End Get
		Set
			If (Me._CylinderCapacity.Equals(value) = false) Then
				Me.OnCylinderCapacityChanging(value)
				Me.SendPropertyChanging
				Me._CylinderCapacity = value
				Me.SendPropertyChanged("CylinderCapacity")
				Me.OnCylinderCapacityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Price", DbType:="Money")>  _
	Public Property Price() As System.Nullable(Of Decimal)
		Get
			Return Me._Price
		End Get
		Set
			If (Me._Price.Equals(value) = false) Then
				Me.OnPriceChanging(value)
				Me.SendPropertyChanging
				Me._Price = value
				Me.SendPropertyChanged("Price")
				Me.OnPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Quantity", DbType:="Int")>  _
	Public Property Quantity() As System.Nullable(Of Integer)
		Get
			Return Me._Quantity
		End Get
		Set
			If (Me._Quantity.Equals(value) = false) Then
				Me.OnQuantityChanging(value)
				Me.SendPropertyChanging
				Me._Quantity = value
				Me.SendPropertyChanged("Quantity")
				Me.OnQuantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblMotor_tblOrderInvoiceDetail", Storage:="_tblOrderInvoiceDetails", ThisKey:="ProductID", OtherKey:="ProductID")>  _
	Public Property tblOrderInvoiceDetails() As EntitySet(Of tblOrderInvoiceDetail)
		Get
			Return Me._tblOrderInvoiceDetails
		End Get
		Set
			Me._tblOrderInvoiceDetails.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblOrderInvoiceDetails(ByVal entity As tblOrderInvoiceDetail)
		Me.SendPropertyChanging
		entity.tblMotor = Me
	End Sub
	
	Private Sub detach_tblOrderInvoiceDetails(ByVal entity As tblOrderInvoiceDetail)
		Me.SendPropertyChanging
		entity.tblMotor = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblOrderInvoice")>  _
Partial Public Class tblOrderInvoice
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _OrderID As String
	
	Private _OrderDate As System.Nullable(Of Date)
	
	Private _CustName As String
	
	Private _TelNo As String
	
	Private _IDC As String
	
	Private _Address As String
	
	Private _TotalMoney As System.Nullable(Of Decimal)
	
	Private _tblOrderInvoiceDetails As EntitySet(Of tblOrderInvoiceDetail)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnOrderIDChanging(value As String)
    End Sub
    Partial Private Sub OnOrderIDChanged()
    End Sub
    Partial Private Sub OnOrderDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnOrderDateChanged()
    End Sub
    Partial Private Sub OnCustNameChanging(value As String)
    End Sub
    Partial Private Sub OnCustNameChanged()
    End Sub
    Partial Private Sub OnTelNoChanging(value As String)
    End Sub
    Partial Private Sub OnTelNoChanged()
    End Sub
    Partial Private Sub OnIDCChanging(value As String)
    End Sub
    Partial Private Sub OnIDCChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnTotalMoneyChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnTotalMoneyChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblOrderInvoiceDetails = New EntitySet(Of tblOrderInvoiceDetail)(AddressOf Me.attach_tblOrderInvoiceDetails, AddressOf Me.detach_tblOrderInvoiceDetails)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderID", DbType:="Char(5) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property OrderID() As String
		Get
			Return Me._OrderID
		End Get
		Set
			If (String.Equals(Me._OrderID, value) = false) Then
				Me.OnOrderIDChanging(value)
				Me.SendPropertyChanging
				Me._OrderID = value
				Me.SendPropertyChanged("OrderID")
				Me.OnOrderIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderDate", DbType:="DateTime")>  _
	Public Property OrderDate() As System.Nullable(Of Date)
		Get
			Return Me._OrderDate
		End Get
		Set
			If (Me._OrderDate.Equals(value) = false) Then
				Me.OnOrderDateChanging(value)
				Me.SendPropertyChanging
				Me._OrderDate = value
				Me.SendPropertyChanged("OrderDate")
				Me.OnOrderDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustName", DbType:="NVarChar(50)")>  _
	Public Property CustName() As String
		Get
			Return Me._CustName
		End Get
		Set
			If (String.Equals(Me._CustName, value) = false) Then
				Me.OnCustNameChanging(value)
				Me.SendPropertyChanging
				Me._CustName = value
				Me.SendPropertyChanged("CustName")
				Me.OnCustNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TelNo", DbType:="Char(10)")>  _
	Public Property TelNo() As String
		Get
			Return Me._TelNo
		End Get
		Set
			If (String.Equals(Me._TelNo, value) = false) Then
				Me.OnTelNoChanging(value)
				Me.SendPropertyChanging
				Me._TelNo = value
				Me.SendPropertyChanged("TelNo")
				Me.OnTelNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDC", DbType:="NChar(20)")>  _
	Public Property IDC() As String
		Get
			Return Me._IDC
		End Get
		Set
			If (String.Equals(Me._IDC, value) = false) Then
				Me.OnIDCChanging(value)
				Me.SendPropertyChanging
				Me._IDC = value
				Me.SendPropertyChanged("IDC")
				Me.OnIDCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="NVarChar(100)")>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalMoney", DbType:="Money")>  _
	Public Property TotalMoney() As System.Nullable(Of Decimal)
		Get
			Return Me._TotalMoney
		End Get
		Set
			If (Me._TotalMoney.Equals(value) = false) Then
				Me.OnTotalMoneyChanging(value)
				Me.SendPropertyChanging
				Me._TotalMoney = value
				Me.SendPropertyChanged("TotalMoney")
				Me.OnTotalMoneyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblOrderInvoice_tblOrderInvoiceDetail", Storage:="_tblOrderInvoiceDetails", ThisKey:="OrderID", OtherKey:="OrderID")>  _
	Public Property tblOrderInvoiceDetails() As EntitySet(Of tblOrderInvoiceDetail)
		Get
			Return Me._tblOrderInvoiceDetails
		End Get
		Set
			Me._tblOrderInvoiceDetails.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblOrderInvoiceDetails(ByVal entity As tblOrderInvoiceDetail)
		Me.SendPropertyChanging
		entity.tblOrderInvoice = Me
	End Sub
	
	Private Sub detach_tblOrderInvoiceDetails(ByVal entity As tblOrderInvoiceDetail)
		Me.SendPropertyChanging
		entity.tblOrderInvoice = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblOrderInvoiceDetail")>  _
Partial Public Class tblOrderInvoiceDetail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _OrderID As String
	
	Private _ProductID As String
	
	Private _QtyOrdered As System.Nullable(Of Integer)
	
	Private _Amount As System.Nullable(Of Decimal)
	
	Private _tblOrderInvoice As EntityRef(Of tblOrderInvoice)
	
	Private _tblMotor As EntityRef(Of tblMotor)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnOrderIDChanging(value As String)
    End Sub
    Partial Private Sub OnOrderIDChanged()
    End Sub
    Partial Private Sub OnProductIDChanging(value As String)
    End Sub
    Partial Private Sub OnProductIDChanged()
    End Sub
    Partial Private Sub OnQtyOrderedChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnQtyOrderedChanged()
    End Sub
    Partial Private Sub OnAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnAmountChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblOrderInvoice = CType(Nothing, EntityRef(Of tblOrderInvoice))
		Me._tblMotor = CType(Nothing, EntityRef(Of tblMotor))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderID", DbType:="Char(5) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property OrderID() As String
		Get
			Return Me._OrderID
		End Get
		Set
			If (String.Equals(Me._OrderID, value) = false) Then
				If Me._tblOrderInvoice.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnOrderIDChanging(value)
				Me.SendPropertyChanging
				Me._OrderID = value
				Me.SendPropertyChanged("OrderID")
				Me.OnOrderIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", DbType:="Char(5) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ProductID() As String
		Get
			Return Me._ProductID
		End Get
		Set
			If (String.Equals(Me._ProductID, value) = false) Then
				If Me._tblMotor.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnProductIDChanging(value)
				Me.SendPropertyChanging
				Me._ProductID = value
				Me.SendPropertyChanged("ProductID")
				Me.OnProductIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QtyOrdered", DbType:="Int")>  _
	Public Property QtyOrdered() As System.Nullable(Of Integer)
		Get
			Return Me._QtyOrdered
		End Get
		Set
			If (Me._QtyOrdered.Equals(value) = false) Then
				Me.OnQtyOrderedChanging(value)
				Me.SendPropertyChanging
				Me._QtyOrdered = value
				Me.SendPropertyChanged("QtyOrdered")
				Me.OnQtyOrderedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount", DbType:="Money")>  _
	Public Property Amount() As System.Nullable(Of Decimal)
		Get
			Return Me._Amount
		End Get
		Set
			If (Me._Amount.Equals(value) = false) Then
				Me.OnAmountChanging(value)
				Me.SendPropertyChanging
				Me._Amount = value
				Me.SendPropertyChanged("Amount")
				Me.OnAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblOrderInvoice_tblOrderInvoiceDetail", Storage:="_tblOrderInvoice", ThisKey:="OrderID", OtherKey:="OrderID", IsForeignKey:=true)>  _
	Public Property tblOrderInvoice() As tblOrderInvoice
		Get
			Return Me._tblOrderInvoice.Entity
		End Get
		Set
			Dim previousValue As tblOrderInvoice = Me._tblOrderInvoice.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblOrderInvoice.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblOrderInvoice.Entity = Nothing
					previousValue.tblOrderInvoiceDetails.Remove(Me)
				End If
				Me._tblOrderInvoice.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblOrderInvoiceDetails.Add(Me)
					Me._OrderID = value.OrderID
				Else
					Me._OrderID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("tblOrderInvoice")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblMotor_tblOrderInvoiceDetail", Storage:="_tblMotor", ThisKey:="ProductID", OtherKey:="ProductID", IsForeignKey:=true)>  _
	Public Property tblMotor() As tblMotor
		Get
			Return Me._tblMotor.Entity
		End Get
		Set
			Dim previousValue As tblMotor = Me._tblMotor.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblMotor.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblMotor.Entity = Nothing
					previousValue.tblOrderInvoiceDetails.Remove(Me)
				End If
				Me._tblMotor.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblOrderInvoiceDetails.Add(Me)
					Me._ProductID = value.ProductID
				Else
					Me._ProductID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("tblMotor")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
